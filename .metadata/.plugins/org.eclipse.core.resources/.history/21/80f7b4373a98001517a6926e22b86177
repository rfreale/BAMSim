package cbr;

import javax.annotation.Generated;

import jcolibri.cbraplications.StandardCBRApplication;
import jcolibri.cbrcore.Attribute;
import jcolibri.cbrcore.CBRCase;
import jcolibri.cbrcore.CBRCaseBase;
import jcolibri.cbrcore.CBRQuery;
import jcolibri.exception.ExecutionException;
import jcolibri.exception.InitializingException;
import jcolibri.method.retrieve.NNretrieval.NNConfig;
import representation.DescricaoDoCaso;

public class CBRApplication implements StandardCBRApplication {

	



	//******************************************************************/
	// Configuration
	//******************************************************************/

	@Override
	public void configure() throws ExecutionException {
		try{
			configureConnector();
			configureCaseBase();
		} catch (Exception e){
			throw new ExecutionException(e);
		}
	}

	/** Configures the connector */
	@Generated(value = { "CS-PTConector" })	
	private void configureConnector() throws InitializingException{
		connector = new jcolibri.connector.PlainTextConnector();
		connector.initFromXMLfile(jcolibri.util.FileIO
				.findFile("config/plainTextConnectorConfig.xml"));
	}

	/** Configures the case base */
	@Generated(value = { "CS-CaseManager" })	
	private void configureCaseBase() throws InitializingException{
		casebase = new jcolibri.casebase.LinearCaseBase();
	}

	//******************************************************************/
	// Similarity
	//******************************************************************/
	
	/** Configures the similarity */
	@Generated(value = { "CS-Similarity" })	
	private NNConfig getSimilarityConfig() {
		NNConfig simConfig = new NNConfig();
		simConfig
				.setDescriptionSimFunction(new jcolibri.method.retrieve.NNretrieval.similarity.global.Average());
		Attribute attribute0 = new Attribute("bloqueio", DescricaoDoCaso.class);
		simConfig
				.addMapping(
						attribute0,
						new jcolibri.method.retrieve.NNretrieval.similarity.local.Interval());
		simConfig.setWeight(attribute0, 0.35);
		Attribute attribute1 = new Attribute("devolucao", DescricaoDoCaso.class);
		simConfig
				.addMapping(
						attribute1,
						new jcolibri.method.retrieve.NNretrieval.similarity.local.Interval());
		simConfig.setWeight(attribute1, 0.85);
		Attribute attribute2 = new Attribute("preempcao", DescricaoDoCaso.class);
		simConfig
				.addMapping(
						attribute2,
						new jcolibri.method.retrieve.NNretrieval.similarity.local.Interval());
		simConfig.setWeight(attribute2, 0.50);
		Attribute attribute3 = new Attribute("BAMAtual", DescricaoDoCaso.class);
		simConfig
				.addMapping(
						attribute3,
						new jcolibri.method.retrieve.NNretrieval.similarity.local.Equal());
		simConfig.setWeight(attribute3, 1.00);
		return simConfig;
	}

	//******************************************************************/
	// Methods
	//******************************************************************/
	

	@Generated(value = { "ColibriStudio" })
	private void cycle_3(jcolibri.cbrcore.CBRQuery query)
			throws ExecutionException {
		if (recolibry.conditionals.BuyOrQuit.buyOrQuit(userChoice))
			cycle_4(query);
		else
			cycle_5(query);
	}

	@Generated(value = { "ColibriStudio" })
	private void cycle_2(jcolibri.cbrcore.CBRQuery query)
			throws ExecutionException {
		jcolibri.method.gui.formFilling.ObtainQueryWithFormMethod
				.obtainQueryWithInitialValues(query, hiddenAttributes, labels);
		cycle_1(query);
	}

	@Generated(value = { "ColibriStudio" })
	private void cycle_1(jcolibri.cbrcore.CBRQuery query)
			throws ExecutionException {
		scoredCases = jcolibri.method.retrieve.NNretrieval.NNScoringMethod
				.evaluateSimilarity(casebase.getCases(), query,
						this.getSimilarityConfig());
		selectedCases = jcolibri.method.retrieve.selection.SelectCases
				.selectTopK(scoredCases, k);
		userChoice = jcolibri.util.gui.DisplayCasesTableMethod.displayCasesInTableBasic(selectedCases);
		//		.displayCasesInTableEditQuery(selectedCases);
		/*if (recolibry.conditionals.ContinueOrFinish
				.continueOrFinish(userChoice))
			cycle_2(query);
		else
			cycle_3(query);*/
	}

	@Generated(value = { "ColibriStudio" })
	public void postCycle() throws ExecutionException {
		for (CBRCase c:casebase.getCases())System.out.println(c);
		//jcolibri.method.postcycle.StoreCases.storeCases(connector, casebase);
	}

	@Generated(value = { "ColibriStudio" })
	public void cycle(jcolibri.cbrcore.CBRQuery query)
			throws ExecutionException {
		jcolibri.method.gui.formFilling.ObtainQueryWithFormMethod
				.obtainQueryWithInitialValues(query, hiddenAttributes, labels);
		cycle_1(query);
	}

	@Generated(value = { "ColibriStudio" })
	public jcolibri.cbrcore.CBRCaseBase preCycle() throws ExecutionException {
		casebase = jcolibri.method.precycle.LoadCases.loadCases(connector,
				casebase);
		return casebase;
	}

	@Generated(value = { "ColibriStudio" })
	private void cycle_5(jcolibri.cbrcore.CBRQuery query)
			throws ExecutionException {
	}

	@Generated(value = { "ColibriStudio" })
	private void cycle_4(jcolibri.cbrcore.CBRQuery query)
			throws ExecutionException {
	}

	@Generated(value = { "ColibriStudio" })
	java.util.Collection<jcolibri.cbrcore.Attribute> hiddenAttributes;

	@Generated(value = { "ColibriStudio" })
	java.util.Map<jcolibri.cbrcore.Attribute, java.lang.String> labels;

	@Generated(value = { "ColibriStudio" })
	java.lang.Integer k=1;

	@Generated(value = { "ColibriStudio" })
	jcolibri.cbrcore.Connector connector;

	@Generated(value = { "ColibriStudio" })
	jcolibri.cbrcore.CBRCaseBase casebase;

	@Generated(value = { "ColibriStudio" })
	jcolibri.method.retrieve.NNretrieval.NNConfig simConfig;

	@Generated(value = { "ColibriStudio" })
	java.util.Collection<jcolibri.method.retrieve.RetrievalResult> scoredCases;

	@Generated(value = { "ColibriStudio" })
	java.util.Collection<jcolibri.cbrcore.CBRCase> selectedCases;

	@Generated(value = { "ColibriStudio" })
	jcolibri.util.gui.UserChoice userChoice;



	@Generated(value = { "ColibriStudio" })
	public void setLabels(
			java.util.Map<jcolibri.cbrcore.Attribute, java.lang.String> labels) {
		this.labels = labels;
	}

	@Generated(value = { "ColibriStudio" })
	public void setK(java.lang.Integer k) {
		this.k = k;
	}

	@Generated(value = { "ColibriStudio" })
	public void setHiddenAttributes(
			java.util.Collection<jcolibri.cbrcore.Attribute> hiddenAttributes) {
		this.hiddenAttributes = hiddenAttributes;
	}

	@Generated(value={"ColibriStudio"}) public static void main(String[] args){
		CBRApplication cbrApp=new CBRApplication();
		try {
			cbrApp.configure();
			CBRCaseBase caseBase=cbrApp.preCycle();
			CBRQuery query = new CBRQuery();
			query.setDescription(new DescricaoDoCaso());
			cbrApp.cycle(query);
			cbrApp.postCycle();
			
			} catch (ExecutionException e)
			{
				e.printStackTrace();
			}
		}
}
