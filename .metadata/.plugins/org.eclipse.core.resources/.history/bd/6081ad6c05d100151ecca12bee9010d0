package Main;
import java.io.IOException;
import java.util.Date;

import jcolibri.cbrcore.CBRCase;
import jcolibri.cbrcore.CBRQuery;
import jcolibri.exception.ExecutionException;

import org.jrobin.core.RrdException;

import BAM.BAMRecommender.BAMDescription.BAMTypes;
import BAM.BAMRecommender.BAMDescription.Problemas;
import BAM.BAMRecommender.BAMRecommenderNoGUI;
import BAM.BAMRecommender.BAMSolution;
import DSTE.*;
import Simulador.Debug;
import Simulador.Estatisticas;
import Simulador.GeradorDeNumerosAleatorios;
import Simulador.No;
import Simulador.RodadaDeSimulacao;


public class TesteSimulacao {
	
	
	public TesteSimulacao(RodadaDeSimulacao rodada) throws IOException, RrdException
	{
		
		
		BancoDeDados.setXML("<?xml version='1.0'?>\r\n", rodada.filename);
		BancoDeDados.setXML("<simulacao>\r\n", rodada.filename);
		Debug.setMensagem("============================ Início da Primeira Rodada ============================");

		Topologia to= new Topologia();
		
		//Mostra parâmetros padrões
		Debug.setMensagem(ParametrosDSTE.getParametros(),7,7);
		
		/*
		ParametrosDSTE.BAMTypePadrao = BAMType.NoPreemptionMAM;
		ParametrosDSTE.BCPadrao= new double[]
		{	30, // BC[0] =CT0 + CT1 + CT2 (Valor do Enlace)
			30, // BC[1] = CT1 + CT2
			40 // BC[2] =  CT2
		};
		*/
		//Carrega a topologia da rede manual
		Debug.setMensagem("Inicio: to.carregarTopologiaManual()",10,10);
		to.carregarTopologiaManual();
		//to.carregarTopologiaArquivo();
		Debug.setMensagem("Fim: to.carregarTopologiaManual()",10,10);
		
		//Carrega a matriz de caminhos por roteador manual
		Debug.setMensagem("Inicio: to.carregarMatrizDeCaminhosManual()",10,10);
		to.carregarMatrizDeCaminhosManual();
		Debug.setMensagem("Fim: to.carregarMatrizDeCaminhosManual()",10,10);
		
		//Gera Topologia Roteador x Roteador
		Debug.setMensagem("Inicio: to.gerarTopologiaDosRoteadores()",10,10);
		to.gerarTopologiaDosRoteadores();
		Debug.setMensagem("Fim: to.gerarTopologiaDosRoteadores()",10,10);
		
		//Gera Topologia Link x Roteador
		Debug.setMensagem("Inicio: to.gerarTopologiaDosLinks()",10,10);
		to.gerarTopologiaDosLinks();
		Debug.setMensagem("Fim: to.gerarTopologiaDosLinks()",10,10);
		
		
		//Imprime no console a Topologia Roteador x Roteador
		Debug.setMensagem("\r\n\r\n ==== Topologia Roteador x Roteador  ====");
		Debug.setMensagem(to.imprimirTopologiaDosRoteadores());
		
		//Imprime no console a Topologia Link x Roteador
		Debug.setMensagem("\r\n\r\n ==== Topologia Link x Roteador  ====");
		Debug.setMensagem(to.imprimirTopologiaDosLinks());
		
		//Imprime no console a Matriz de Caminhos por Roteador
		Debug.setMensagem("\r\n\r\n ==== Matriz de Caminhos por Roteador  ====");
		Debug.setMensagem(to.imprimirCaminhos());
		
		//Imprime no console o Status dos Links
		Debug.setMensagem("\r\n\r\n ==== Status dos Links  ====");
		Debug.setMensagem(to.statusLinks());
		
		//Inicializa tráfego
		Debug.setMensagem("\r\n\r\n ==== Inicializa o tráfego  ====");
		inciatrafego(rodada);
		
		//agenda estatísticas
		rodada.schedulep (4, ParametrosDSTE.RRDAmostra, null);
		
		//agenda avaliação CBR
		rodada.schedulep (5, ParametrosDSTE.Janela, null);
		try {
			rodada.estatistica.iniciarRRDLinks(to);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		//inciatrafego2(rodada);
		
		
		
		
		//Inicializa a cadeia de eventos
		Debug.setMensagem("\r\n\r\n ==== Inicio da simulação  ====");
		cadeiaDeEventos(rodada, to);
		Debug.setMensagem("\r\n\r\n ==== Fim da simulação  ====");
		BancoDeDados.setXML("</simulacao>\r\n", rodada.filename);
		Debug.setMensagem("============================ Fim da Primeira Rodada ============================");
		
			
	
	}
	
	public void cadeiaDeEventos(RodadaDeSimulacao rodada, Topologia to) throws IOException, RrdException
	{
		No dados;
		//Lsp lsp;
		int i=1;
		while (rodada.simtime()<=86400) 
		//while (rodada.simtime()<=36000)	
		{
			
			
			

				
			
			
/*
			BancoDeDados.setXML("<interacao>\r\n");
			BancoDeDados.setXML("<interacao_total_lsps_geradas>"+EstatisticasDSTE.lspGeradas+"</interacao_total_lsps_geradas>\r\n");
			for(int j=0;j<ParametrosDSTE.MaxClassType;j++)
				BancoDeDados.setXML("<interacao_lsps_preempted_class_"+j+">"+EstatisticasDSTE.preempcoesCT[j]+"</interacao_lsps_preempted_class_"+j+">\r\n");
			for(int j=0;j<ParametrosDSTE.MaxClassType;j++)
				BancoDeDados.setXML("<interacao_lsps_preempted_class_debt_"+j+">"+EstatisticasDSTE.devolucoesCT[j]+"</interacao_lsps_preempted_class_debt_"+j+">\r\n");
			for(int j=0;j<ParametrosDSTE.MaxClassType;j++)
				BancoDeDados.setXML("<interacao_lsps_blocked_class_"+j+">"+EstatisticasDSTE.bloqueiosCT[j]+"</interacao_lsps_blocked_class_"+j+">\r\n");
			BancoDeDados.setXML("<interacao_total_lsps_preemptadas>"+EstatisticasDSTE.preempcoes+"</interacao_total_lsps_preemptadas>\r\n");
			BancoDeDados.setXML("<interacao_total_lsps_bloqueadas>"+EstatisticasDSTE.bloqueios+"</interacao_total_lsps_bloqueadas>\r\n");
			BancoDeDados.setXML("<interacao_total_lsps_preemptadas_debt>"+EstatisticasDSTE.devolucoes+"</interacao_total_lsps_preemptadas_debt>\r\n");
			BancoDeDados.setXML("<interacao_total_banda_atendida>"+EstatisticasDSTE.bandaAtendida+"</interacao_total_banda_atendida>\r\n");
			for(int y=0;y<ParametrosDSTE.LINKS;y++)
			{
				BancoDeDados.setXML("<enlace>\r\n");
				BancoDeDados.setXML("<enlace_numero>"+y+"</enlace_numero>\r\n");

				
				BancoDeDados.setXML("<enlace_carga>"+to.link[y].getCargaEnlaceAtual()+"</enlace_carga>\r\n");
				BancoDeDados.setXML("<enlace_residual>"+to.link[y].CargaResidual()+"</enlace_residual>\r\n");

				 if(to.link[y].bamType!=BAMType.NoPreemptionMAM||to.link[y].bamType!=BAMType.PreemptionMAM)
				 {
						for(int j=0;j<ParametrosDSTE.MaxClassType;j++)
						{
							if(j!=ParametrosDSTE.MaxClassType-1)
								BancoDeDados.setXML("<enlace_carga_ct_"+j+">"+(to.link[y].BCAcumulado(j)-to.link[y].BCAcumulado(j+1))+"</enlace_carga_ct_"+j+">\r\n");
							else
								BancoDeDados.setXML("<enlace_carga_ct_"+j+">"+to.link[y].BCAcumulado(j)+"</enlace_carga_ct_"+j+">\r\n");

						}
				 }
				 else
				 {
					 for(int j=0;j<ParametrosDSTE.MaxClassType;j++)
						{
						 BancoDeDados.setXML("<enlace_carga_ct_"+j+">"+to.link[y].BCAcumulado(j)+"</enlace_carga_ct_"+j+">\r\n");

						}
				 }
				 BancoDeDados.setXML("</enlace>\r\n");
			}
			BancoDeDados.setXML("</interacao>\r\n");
			
			
			*/
			
			
			
			
			//Debug.setMensagem("\r\n\r\n///////// Interacao("+(i++)+")////////");
			//Debug.setMensagem(rodada.imprime_evchain());
			dados=rodada.causep();
			Lsp auxLSP;
			switch(rodada.causep_ev)
			{
				case 1: 
					//Estabelecer uma lsp
					rodada.estatistica.lspGeradas++;
					rodada.estatistica.bandaGerada+=((Lsp)dados.item).Carga;
					Debug.setMensagem("Tipo 1 - Tentar estabelecer LSP "+((Lsp)dados.item).ID+" com "+((Lsp)dados.item).Carga+" Mbps");
					BancoDeDados.setXML((long)rodada.simtime()+" - Tipo 1 - Tentar estabelecer LSP "+((Lsp)dados.item).ID+" com "+((Lsp)dados.item).Carga+" Mbps", rodada.filename);
					Link [] menorCaminho = Roteamento.TryPath_CSPF(((Lsp)dados.item), to);
					if(menorCaminho!=null)
					{
						Debug.setMensagem(" ==== Menor caminho  ====");
						Debug.setMensagem(to.imprimirCaminho(menorCaminho));
						((Lsp)dados.item).estabelecerLSP (menorCaminho);
						((Lsp)dados.item).status=LspStatus.estabelecida;
						rodada.estatistica.lspEstabelecidas++;
						Debug.setMensagem("========= LSP"+((Lsp)dados.item).ID+" Estabelecida ========");
						
						//agenda desestabelecimento
						rodada.schedulep (2, ((Lsp)dados.item).tempoDeVida, dados);
						
						
					}
					else
					{
						Debug.setMensagem("========= LSP"+((Lsp)dados.item).ID+" Bloqueada ========");
						((Lsp)dados.item).status=LspStatus.bloqueada;
						rodada.estatistica.bloqueios++;
						rodada.estatistica.bloqueiosCT[((Lsp)dados.item).CT]++;
					}
					
				break;
				case 2: 
					//Desestabelece LSP: Liberacao da Banda Ocupada 
					Debug.setMensagem("Tipo 2 - Desestabelece LSP "+((Lsp)dados.item).ID+" com "+((Lsp)dados.item).Carga+" Mbps");
					((Lsp)dados.item).desestabeleceLSP();
					rodada.estatistica.lspAtendidas++;
					rodada.estatistica.bandaAtendida+=((Lsp)dados.item).Carga;
					((Lsp)dados.item).status=LspStatus.finalizada;
					
				break;
				case 3: 
					//Gera LSP - Tipo 3 - R0 -->R54
					Debug.setMensagem("Tipo 3 - Agenda/Cria LSP R0 -->R1");
					
					Debug.setMensagem("Gera uma nova LSP da mesma CT - S1 -->D1");

					for(int ww =1;ww<= ((Integer)dados.item); ww++)
					{
						rodada.schedulep(0,1,(ww-1)%3,(int)GeradorDeNumerosAleatorios.uniform(2,15),1, (int)GeradorDeNumerosAleatorios.uniform(1,3599),GeradorDeNumerosAleatorios.expntl(3600));
					}
					
				break;
				case 4: 
					
				
					rodada.estatistica.inserirDadosRRD((long)rodada.simtime());
					rodada.estatistica.statusLinks(to, (long)rodada.simtime());

					rodada.schedulep (4, ParametrosDSTE.RRDAmostra, null);
				break;
				case 5: 
					rodada.schedulep (5, ParametrosDSTE.Janela, null);
					if (rodada.estatistica.devolucoes(ParametrosDSTE.Janela)>=5)
					{
						CBRCase cbrCase = null;
						CBRQuery query = rodada.estatistica.getQuery(to.link[0],Problemas.AltaDevolucao, to.link[0].bamType);
						try {
							cbrCase =BAMRecommenderNoGUI.getInstance().cycle(query);
							
						} catch (ExecutionException e) {
							// TODO Auto-generated catch block
							org.apache.commons.logging.LogFactory.getLog(BAMRecommenderNoGUI.class).error(e);
							e.printStackTrace();
						}
						
						BAMSolution solution = (BAMSolution) cbrCase.getSolution();
						
						switch(solution.getBAMNovo())
						{
							case NoPreemptionMAM: 
								to.link[0].bamType=BAMType.NoPreemptionMAM;
								to.link[0].BC = new double[]
									{	40, // BC[0] =CT0 (Valor do Enlace)
										30, // BC[1] = CT1
										30 // BC[2] =  CT2
									};
								BAM.forcePreemption(to.link[0]);
								break;
							case PreemptionRDM: 
								to.link[0].bamType=BAMType.PreemptionRDM;
								to.link[0].BC = new double[]
									{	100, // BC[0] =CT0 + CT1 + CT2 (Valor do Enlace)
										60, // BC[1] = CT1 + CT2
										30 // BC[1] = CT2
									};
								 BAM.forcePreemption(to.link[0]);
								 break;
							case PreemptionAllocCTSharing: 
								to.link[0].bamType=BAMType.PreemptionAllocCTSharing;
								to.link[0].BC = new double[]
									{	100, // BC[0] =CT0 + CT1 + CT2 (Valor do Enlace)
										60, // BC[1] = CT1 + CT2
										30 // BC[1] = CT2
									};
								  break;
						
						}
					}else
					if (rodada.estatistica.preempcoes(ParametrosDSTE.Janela)>=5)
					{
						CBRCase cbrCase = null;
						CBRQuery query = rodada.estatistica.getQuery(to.link[0],Problemas.AltaPreempcao, to.link[0].bamType);
						try {
							cbrCase =BAMRecommenderNoGUI.getInstance().cycle(query);
							
						} catch (ExecutionException e) {
							// TODO Auto-generated catch block
							org.apache.commons.logging.LogFactory.getLog(BAMRecommenderNoGUI.class).error(e);
							e.printStackTrace();
						}
						
						BAMSolution solution = (BAMSolution) cbrCase.getSolution();
						
						switch(solution.getBAMNovo())
						{
							case NoPreemptionMAM: 
								to.link[0].bamType=BAMType.NoPreemptionMAM;
								to.link[0].BC = new double[]
									{	40, // BC[0] =CT0 (Valor do Enlace)
										30, // BC[1] = CT1
										30 // BC[2] =  CT2
									};
								BAM.forcePreemption(to.link[0]);
								break;
							case PreemptionRDM: 
								to.link[0].bamType=BAMType.PreemptionRDM;
								to.link[0].BC = new double[]
									{	100, // BC[0] =CT0 + CT1 + CT2 (Valor do Enlace)
										60, // BC[1] = CT1 + CT2
										30 // BC[1] = CT2
									};
								 BAM.forcePreemption(to.link[0]);
								 break;
							case PreemptionAllocCTSharing: 
								to.link[0].bamType=BAMType.PreemptionAllocCTSharing;
								to.link[0].BC = new double[]
									{	100, // BC[0] =CT0 + CT1 + CT2 (Valor do Enlace)
										60, // BC[1] = CT1 + CT2
										30 // BC[1] = CT2
									};
								  break;
						
						}
					}else
					if ((to.link[0].getCargaEnlaceAtual()*100/to.link[0].CargaEnlace)<=70)
					{
						CBRCase cbrCase = null;
						CBRQuery query = rodada.estatistica.getQuery(to.link[0],Problemas.BaixaUtilizacao, to.link[0].bamType);
						try {
							cbrCase =BAMRecommenderNoGUI.getInstance().cycle(query);
							
						} catch (ExecutionException e) {
							// TODO Auto-generated catch block
							org.apache.commons.logging.LogFactory.getLog(BAMRecommenderNoGUI.class).error(e);
							e.printStackTrace();
						}
						
						BAMSolution solution = (BAMSolution) cbrCase.getSolution();
						
						switch(solution.getBAMNovo())
						{
							case NoPreemptionMAM: 
								to.link[0].bamType=BAMType.NoPreemptionMAM;
								to.link[0].BC = new double[]
									{	40, // BC[0] =CT0 (Valor do Enlace)
										30, // BC[1] = CT1
										30 // BC[2] =  CT2
									};
								BAM.forcePreemption(to.link[0]);
								break;
							case PreemptionRDM: 
								to.link[0].bamType=BAMType.PreemptionRDM;
								to.link[0].BC = new double[]
									{	100, // BC[0] =CT0 + CT1 + CT2 (Valor do Enlace)
										60, // BC[1] = CT1 + CT2
										30 // BC[1] = CT2
									};
								 BAM.forcePreemption(to.link[0]);
								 break;
							case PreemptionAllocCTSharing: 
								to.link[0].bamType=BAMType.PreemptionAllocCTSharing;
								to.link[0].BC = new double[]
									{	100, // BC[0] =CT0 + CT1 + CT2 (Valor do Enlace)
										60, // BC[1] = CT1 + CT2
										30 // BC[1] = CT2
									};
								  break;
						
						}
					}
				break;
				
			}
			//Debug.setMensagem(" ==== Status dos Links  ====");
			//Debug.setMensagem(to.statusLinks());
			Debug.setMensagem(rodada.imprime_evchain(),0,0);

		}
		Debug.setMensagem("\r\n\r\n ==== Status dos Links  ====");
		Debug.setMensagem(to.statusLinks());
		
		Debug.setMensagem(rodada.estatistica.getEstatisticas());
		try {
			rodada.estatistica.gerarRRDPNGpreempcao();
			rodada.estatistica.gerarRRDPNGlspGeradas();
			rodada.estatistica.gerarRRDPNGbloqueio();
			rodada.estatistica.gerarRRDPNGdevolucao();
			rodada.estatistica.gerarRRDXML();
			rodada.estatistica.gerarLinksRRDXML();
			rodada.estatistica.gerarLinkRRDPNG(to);
		} catch (RrdException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
	public void inciatrafego(RodadaDeSimulacao rodada)
	{
		iniciaTrafegoR0(rodada);
		//iniciaTrafegoR1(rodada);
		//iniciaTrafegoR2(rodada);
		//iniciaTrafegoR3(rodada);
		
	}
	
	public void iniciaTrafegoR0(RodadaDeSimulacao rodada)
	{
		
		int lambda = 12;
		int numeroDeLSPs[] = new int[lambda*3];
		for (int i=0;i<1500;i++)
		{
			int temp=GeradorDeNumerosAleatorios.poisson(lambda);
			if(temp<lambda*3)
				++numeroDeLSPs[temp];
			else
				System.out.println("erro="+temp);


		}
		for (int i = 1; i < numeroDeLSPs.length; i++) {
			No no = new No();
			no.item = numeroDeLSPs[i];
			rodada.schedulep(3,(i-1)*3600,no);	
			Debug.setMensagem(i+"="+numeroDeLSPs[i]);
		  }
		//Gera LSP - Tipo 3 (CT0) - R0 -->R54
		
		Debug.setMensagem(rodada.imprime_evchain());
		
		
		
	}
	
	
	
}
